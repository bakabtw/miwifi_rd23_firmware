#!/usr/bin/lua

local json          = require("json")
local posix         = require("posix")
local nixio         = require("nixio")
local fs            = require("luci.fs")
local util          = require("luci.util")
local sys           = require("xiaoqiang.util.XQSysUtil")
local netutil       = require("xiaoqiang.util.XQNetUtil")
local downloader    = require("xiaoqiang.util.XQDownloadUtil")
local xqfunction    = require("xiaoqiang.common.XQFunction")
local xqmbox        = require("xiaoqiang.module.XQMessageBox")
local xqcrypto      = require("xiaoqiang.util.XQCryptoUtil")
local config        = require("xiaoqiang.common.XQConfigs")
local preference    = require("xiaoqiang.XQPreference")

-- the backoff time of router mode is 3000 seconds
local ROUTER_BACKOFF_MOD = 3000
-- the total upgrade time of mesh mode is 3240 seconds
local MESH_UPDATE_TOTAL  = 3240
-- the gap between mesh update periods is 120 seconds
local MESH_UPDATE_PERIOD_GAP = 120
local MESH_UPDATE_PERIOD_NUM = 6
local URANDOM_STR_LINE   = 4
local AUTO_DEFAULT  = 0
local PLUGIN_DEFAULT  = 1
local TIME_DEFAULT  = 4
local miscpredflag  = true
local OTAPRDPIDFILE = "/tmp/ota_predownload_pid"

function miscpred()
    local uci = require("luci.model.uci").cursor()
    local download = uci:get("misc", "ota_pred", "download")
    if tonumber(download) and tonumber(download) == 1 then
        miscpredflag = true
    else
        miscpredflag = false
    end
end

function log(...)
    posix.openlog("predownload-ota", LOG_NDELAY, LOG_USER)
    for i, v in ipairs({...}) do
        posix.syslog(4, util.serialize_data(v))
    end
    posix.closelog()
end

function uci_get(key)
    local uci = require("luci.model.uci").cursor()
    if key then
        return uci:get("otapred", "settings", key)
    else
        return nil
    end
end

function uci_set(key, value)
    local uci = require("luci.model.uci").cursor()
    if key then
        if value then
            uci:set("otapred", "settings", key, value)
        else
            uci:delete("otapred", "settings", key)
        end
        uci:commit("otapred")
    end
end

function system_wakeup()
    os.execute("killall -s 10 noflushd ")
end

function get_auto_flag()
    local uci = require("luci.model.uci").cursor()
    local inited = uci:get("xiaoqiang", "common", "INITTED")
    if inited == "YES" then
        return tonumber(uci_get("auto")) or AUTO_DEFAULT
    end
    local sim_pnp = uci:get("misc", "features", "simPlugAndPlay") or "0"

    if sim_pnp == "1" then
        return 1
    else
        return AUTO_DEFAULT
    end
end

-- get a random number by /dev/urandom
function urandom(mod)
    local urand = assert(io.open('/dev/urandom','rb'))
    local str   = urand:read(URANDOM_STR_LINE)
    local sum   = 0
    local ret   = 0

    for index = 1, str:len() do
        sum = 256 * sum + str:byte(index)
    end
    ret = (sum % mod) + 1
    io.close(urand)
    return ret
end

function random_sleep(mod)
    local seconds = urandom(mod)
    log("Update detection will start in "..seconds.." seconds")
    os.execute("sleep "..seconds)
end

-- get hop_info by ubus
function get_hop_info()
    local local_hop = 0
    local max_hop   = 0
    local uci = require("luci.model.uci").cursor()
    local easymesh = uci:get("misc", "mesh", "easymesh")

    if easymesh == "1" then
        local role = uci:get("xiaoqiang", "common", "EASYMESH_ROLE")

        if role == "controller" then
            local_hop = 0
            max_hop = 1
        elseif role == "agent" then
            local_hop = 1
            max_hop = 1
        end

        log("This device's local_hop is "..local_hop.."!")
        log("This easymesh's max_hop is "..max_hop.."!")
        return local_hop, max_hop
    end

    local jsonstr   = util.exec("ubus call xq_info_sync_mqtt hop_info")
    if xqfunction.isStrNil(jsonstr) then
        return local_hop, max_hop
    else
        jsonstr = json.decode(jsonstr)
        local_hop = tonumber(jsonstr["local"])
        max_hop   = tonumber(jsonstr["max"])
    end
    log("This device's local_hop is "..local_hop.."!")
    log("This mesh's max_hop is "..max_hop.."!")
    return local_hop, max_hop
end

-- calculate the period length according to the total number of hops
function cal_mesh_period_len(max_hop)
    local period_len = math.floor(MESH_UPDATE_TOTAL / max_hop)
    return period_len
end

-- mesh device execute delay and random backoff
function mesh_hop_backoff(local_hop, max_hop)
    if local_hop == -1 or max_hop == -1 then
        log("Upgrade delay failed : error hop_info")
        return
    end
    local delay = 0
    local period_len = 0
    local mesh_backoff_mod = 0
    -- the max numbers of update period is 6
    if max_hop < MESH_UPDATE_PERIOD_NUM then
        period_len = cal_mesh_period_len(max_hop + 1)
        mesh_backoff_mod = period_len - MESH_UPDATE_PERIOD_GAP
        delay = (max_hop - local_hop) * period_len
    else
        period_len = cal_mesh_period_len(MESH_UPDATE_PERIOD_NUM)
        mesh_backoff_mod = period_len - MESH_UPDATE_PERIOD_GAP
        local hop_num = (max_hop + 1) / MESH_UPDATE_PERIOD_NUM
        local local_update_period = math.floor((max_hop - local_hop) / hop_num)
        delay = local_update_period * period_len
    end
    log("Update operation is delayed by "..delay.." seconds")
    os.execute("sleep "..delay)
    random_sleep(mesh_backoff_mod)
end

function clear_dir()
    os.execute("rm /userdisk/download/*.bin")
end

function wget(link, filepath)
    local download = "wget -t3 -T30 '"..link.."' -O "..filepath
    os.execute(download)
    return xqcrypto.md5File(filepath)
end

function plugin_upgrade()
    local plugin = tonumber(uci_get("plugin")) or PLUGIN_DEFAULT
    if plugin ~= 1 then
        return
    end
    os.execute("pluginControllor --autoUpdate 2>/dev/null >/dev/null")
end

function system_plugin_auto_upgrade()
    local invokeDate = tostring(uci_get("spauid"))
    local currDate = tostring(os.date("%Y%m%d", os.time()))
    local invokeCount = tonumber(uci_get("spauic")) or 0
    if currDate ~= invokeDate then
        uci_set("spauid", currDate)
        uci_set("spau", 0)
        invokeCount = 0
    end
    invokeCount = invokeCount + 1
    uci_set("spauic", invokeCount)
    local systemPluginAutoUpgradeCalled = tonumber(uci_get("spau")) or 0
    if systemPluginAutoUpgradeCalled == 1 then
        return
    end
    math.randomseed(tostring(os.time()):reverse():sub(1, 6))
    local rand = math.random(0, 2)
    if rand ~= 0 and invokeCount < 3 then
        return
    end
    os.execute("pluginControllor --autoUpdatePro 2>/dev/null >/dev/null")
    uci_set("spau", 1)
end

function ecos_upgrade()
    local devices = util.exec("ubus call trafficd hw")
    if xqfunction.isStrNil(devices) then
        return
    end
    local ecos = {}
    devices = json.decode(devices)
    for mac, item in pairs(devices) do
       local suc,des = nil
       if item.description then
            -- parse desc
            suc, des = pcall(json.decode, item.description)
       end
       if suc and des.hardware and des.hardware == 'R01' then
            if item.version
                and tonumber(item.is_ap) ~= 0
                and tonumber(item.assoc) == 1 then
                local dev = {
                    ["mac"] = mac,
                    ["version"] = item.version,
                    ["channel"] = "current",
                    ["sn"]      = des.sn or "",
                    ["ctycode"] = des.country_code or "CN"
                }
                local ips = item.ip_list
                if #ips > 0 then
                    dev["ip"] = ips[1].ip
                end
                dev["channel"] = des.channel or "current"
                if dev.ip then
                    table.insert(ecos, dev)
                end
            end
       end
    end
    local files = {}
    for _, item in ipairs(ecos) do
        local check = netutil.checkEcosUpgrade(item.version, item.channel, item.sn, item.ctycode)
        if check and check.needUpdate == 1 then
            log("Ecos upgrade info:", check)
            local tfile = "/tmp/"..check.fullHash..".img"
            files[check.fullHash] = tfile
            local download = wget(check.downloadUrl, tfile)
            if download and download == check.fullHash then
                local ret = os.execute("cd /tmp && mk_ecos_image -x "..tfile)
                if ret ~= 0 then
                    log("Ecos image verify failed.")
                else
                    local code = os.execute("tbus postfile "..item.ip.." /tmp/eCos.img")
                    if code ~= 0 then
                        log("Ecos flash failed, mac:"..item.mac.." version:"..item.version)
                    end
                end
            else
                log("Ecos download failed, mac:"..item.mac.." version:"..item.version)
            end
        else
            log("Ecos upgrade info: no update")
        end
    end
    for _, filepath in pairs(files) do
        os.execute("rm "..filepath)
    end
    os.execute("rm /tmp/eCos.img 2>/dev/null >/dev/null")
end

function pctl_dpi_upgrade()
    local UPG_SHELL_PATH = "mipctl_upg.sh"
    local DOWNLOAD_DIR = "/tmp/mipctl_upg"
    local DOWNLOAD_FILE = DOWNLOAD_DIR .. "/dpi.mpk"
    local VERIFIED_FILE = DOWNLOAD_DIR .. "/verified.mpk"

    local FMT_CMD_NAME = "curl"
    local FMT_CMD_DOWNLOAD = FMT_CMD_NAME.." --retry 3 -m 30 -s -f -o '%s' '%s'"
    local FMT_CMD_CHECK = FMT_CMD_NAME.." --retry 3 -m 10 -s -f -I -o /dev/null '%s'"

    local FMT_PLUGIN = "pluginmanager"
    local FMT_PLUGIN_UPK1 = FMT_PLUGIN .. " -v '%s' '%s'"
    local FMT_PLUGIN_UPK2 = FMT_PLUGIN .. " -u '%s' '" .. DOWNLOAD_DIR .. "/'"

    local check = netutil.checkPctlDPIUpgrade()
    if check and 0 == os.execute(UPG_SHELL_PATH .. " is_same_iplmt " .. check.version) and 
                    0 == os.execute(UPG_SHELL_PATH .. " is_new_version " .. check.version) then
        log("Start downloading DPI...")
        -- check url
        if xqfunction.isStrNil(check.downloadUrl) or
                0 ~= os.execute(string.format(FMT_CMD_CHECK, check.downloadUrl))  then
            log("Invalid DPI downloading url.")
            return false
        end
        -- check free space
        if not sys.checkTmpSpace(tonumber(check.fileSize) * 3) then
            log("Not enough memory for downloading DPI.")
            return false
        end
        -- download
        os.execute("rm -r " .. DOWNLOAD_DIR)
        os.execute("mkdir " .. DOWNLOAD_DIR)
        if 0 ~= os.execute(string.format(FMT_CMD_DOWNLOAD, DOWNLOAD_FILE, check.downloadUrl)) then
            log("Failed to download DPI.")
            return false
        end
        -- check MD5
        if check.fullHash ~= xqcrypto.md5File(DOWNLOAD_FILE) then
            log("MD5 unmatched.")
            return false
        end
        -- unpack .mpk
        if 0 ~= os.execute(string.format(FMT_PLUGIN_UPK1, DOWNLOAD_FILE, VERIFIED_FILE)) or 
                    0 ~= os.execute(string.format(FMT_PLUGIN_UPK2, VERIFIED_FILE)) then
            log("Failed to unpack dpi.")
            return false
        end

        log("Start upgrading DPI...")
        if 0 ~= os.execute(UPG_SHELL_PATH .. " upgrade") then
            log("Failed to upgrade.")
            os.execute("rm -r " .. DOWNLOAD_DIR)
            return false
        end
    else
        log("Not need to upgrade mipctlv2 DPI.")
    end
    return true
end

function rom_upgrade(auto, time, hour)
    local check = netutil.checkUpgrade()
    if check and check.needUpdate == 1 then
        xqmbox.addMessage({["type"] = 1, ["data"] = {["version"] = check.version}})
        local updateurl = uci_get("updateurl")
        if updateurl ~= check.downloadUrl then
            local hash, filepath
            if check.weight == 9 or (auto == 1 and hour == time) then
                system_wakeup()
                uci_set("updateurl", check.downloadUrl)
                log("Start downloading...")
                clear_dir()
                preference.set(config.PREF_ROM_FULLSIZE,check.fileSize)
                -- only for v2 512MB ddr, v1 will still in release branch
                if xqfunction.getFeature("0", "system", "cpe") == "1" and check.fileSize  >  config.CPE_UPLOAD_CPE_ROM_SLICE_SIZE  then
                    hash, filepath= downloader.syncDownloadForCpe(check.downloadUrl)
                    if not filepath or not sys.verifyCPEImage(config.CPE_HEADER_CACHE_FILEPATH, config.CPE_MODEM_CACHE_FILEPATH ,config.CPE_SIGN_CACHE_FILEPATH ) then
                        sys.updateUpgradeStatus(9)
                        if filepath and fs.access(filepath) then
                            fs.unlink(filepath)
                        end
                        if usbmode then
                            os.execute("/etc/init.d/usb_deploy_init_script.sh start >/dev/null 2>/dev/null")
                        end
                        return
                    end 
                    -- cpe split download no need to md5 hash
                    hash = check.fullHash
                else
                    hash, filepath = downloader.syncDownload(check.downloadUrl, priority, true)
                end
                if not hash or not filepath then
                    uci_set("updateurl", "")
                end
                if check.fullHash == hash then
                    log("Rom upgrade start...")
                    if fs.access(filepath) and not sys.verifyImage(filepath, true) then
                        log("Rom upgrade failed: Verify Image failed!")
                        fs.unlink(filepath)
                        uci_set("updateurl", "")
                    else
                        if xqfunction.sysLockStatus() ~= 1 then
                            xqfunction.sysLock()
                            sys.updateUpgradeStatus(5)
                            local cmdpending = miscpredflag and "" or " &"
                            local sign_result = os.execute("secboot_upgrade_check.sh fail_return " .. filepath)
                            if 0 == sign_result and 0 == os.execute("flash.sh "..filepath..cmdpending) then
                                sys.updateUpgradeStatus(11)
                                log("Rom upgrade succeed!")
                            else
                                sys.updateUpgradeStatus(10)
                                if fs.access(filepath) then
                                    fs.unlink(filepath)
                                end
                                log("Rom upgrade failed: Flash failed!")
                                uci_set("updateurl", "")
                            end
                        else
                            log("Rom upgrade failed: duplicate!")
                            uci_set("updateurl", "")
                        end
                    end
                else
                    log("Rom upgrade failed: Wrong Hash!")
                    uci_set("updateurl", "")
                end
            else
                log("Rom auto-upgrade disabled!")
                uci_set("updateurl", "")
            end
        end
    end
end

function timed_task()
    local FEATURES = require("xiaoqiang.XQFeatures").FEATURES

    -- Plugin upgrade
    if pcall(plugin_upgrade) then
        log("Plugin upgrade task finished")
    else
        log("Plugin upgrade task failed: fatal error")
    end

    -- PctlV2 dpi upgrade
    if FEATURES.apps.mipctlv2 and FEATURES.apps.mipctlv2 == '1' then
        if pcall(pctl_dpi_upgrade) then
            log("Parentcontrl  DPI upgrade task finished")
        else
            log("Parentcontrol DPI upgrade task failed: fatal error")
        end
    end

    -- Ecos upgrade
    if pcall(ecos_upgrade) then
        log("Ecos upgrade task finished")
    else
        log("Ecos upgrade task failed: fatal error")
    end
end

function crond_task(auto, time, hour)
    if pcall(rom_upgrade, auto, time, hour) then
        log("Rom upgrade task finished")
    else
        log("Rom upgrade task failed: fatal error")
    end

    if pcall(system_plugin_auto_upgrade) then
        log("System plugin auto upgrade task finished")
    else
        log("System plugin auto upgrade task failed: fatal error")
    end
end

function main()
    local pid = fs.readfile(OTAPRDPIDFILE)
    if pid and pid ~= "" then
        local code = os.execute("kill -0 "..tostring(pid))
        if code == 0 then
            return
        end
    end
    pid = nixio.getpid()
    fs.writefile(OTAPRDPIDFILE, pid)

    log("Predownload-ota service start")
    if xqfunction.isMeshMode() then
        local local_hop, max_hop = get_hop_info()
        -- get hop_info failure
        if max_hop == 0 then
            random_sleep(ROUTER_BACKOFF_MOD)
        else
            mesh_hop_backoff(local_hop, max_hop)
        end
    else
        random_sleep(ROUTER_BACKOFF_MOD)
    end
    --while true do
        if xqfunction.sysLockStatus() ~= 1 then
            log("Update detection start..")
            local auto = get_auto_flag()
            local time = tonumber(uci_get("time")) or TIME_DEFAULT
            local hour = tonumber(os.date("%H", os.time()))
            if hour == time then
                timed_task()
            end
            crond_task(auto, time, hour)
        end
    --end
end

miscpred()
main()

-- local enable = tonumber(uci_get("enabled"))

-- if enable == 1 then
--     miscpred()
--     main()
-- else
--     log("Predownload-ota disabled!!!")
-- end
