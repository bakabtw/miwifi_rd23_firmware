#!/bin/sh

export HOTPLUG_TYPE="$1"

. /lib/functions.sh

PATH=/bin:/sbin:/usr/bin:/usr/sbin
LOGNAME=root
USER=root
ACTION=""
DISCOVERY=""
export PATH LOGNAME USER
if [ -f /tmp/iwevent_log ]; then
    iwevent_log="y"
else
    iwevent_log="n"
fi

is_tri_band=$(mesh_cmd is_tri_band 2>>/dev/null)
is_mesh_ver4=$(mesh_cmd support_mesh_version 4)
mesh_support_band=$(uci -q get misc.mesh.support_band)

#   /* system status event */
#   "had associated successfully",  /* IW_ASSOC_EVENT_FLAG */
#   "had disassociated",    /* IW_DISASSOC_EVENT_FLAG */
#   "had deauthenticated",  /* IW_DEAUTH_EVENT_FLAG */
#   "had been aged-out and disassociated",  /* IW_AGEOUT_EVENT_FLAG */
#   "occurred CounterMeasures attack",  /* IW_COUNTER_MEASURES_EVENT_FLAG */
#   "occurred replay counter different in Key Handshaking", /* IW_REPLAY_COUNTER_DIFF_EVENT_FLAG */
#   "occurred RSNIE different in Key Handshaking",  /* IW_RSNIE_DIFF_EVENT_FLAG */
#   "occurred MIC different in Key Handshaking",    /* IW_MIC_DIFF_EVENT_FLAG */
#   "occurred ICV error in RX", /* IW_ICV_ERROR_EVENT_FLAG */
#   "occurred MIC error in RX", /* IW_MIC_ERROR_EVENT_FLAG */
#   "Group Key Handshaking timeout",    /* IW_GROUP_HS_TIMEOUT_EVENT_FLAG */
#   "Pairwise Key Handshaking timeout", /* IW_PAIRWISE_HS_TIMEOUT_EVENT_FLAG */
#   "RSN IE sanity check failure",  /* IW_RSNIE_SANITY_FAIL_EVENT_FLAG */
#   "set key done in WPA/WPAPSK",   /* IW_SET_KEY_DONE_WPA1_EVENT_FLAG */
#   "set key done in WPA2/WPA2PSK", /* IW_SET_KEY_DONE_WPA2_EVENT_FLAG */
#   "connects with our wireless client",    /* IW_STA_LINKUP_EVENT_FLAG */
#   "disconnects with our wireless client", /* IW_STA_LINKDOWN_EVENT_FLAG */
#   "scan completed"    /* IW_SCAN_COMPLETED_EVENT_FLAG */
#   "scan terminate! Busy! Enqueue fail!"   /* IW_SCAN_ENQUEUE_FAIL_EVENT_FLAG */

while read msg; do

    #[ "$iwevent_log" == "y" ] && logger "$msg"

    eval $(lua -e "local s, e, time, dev, sta, event = \
string.find('$msg','^(%S+)%s+(%S+)%s+Custom driver event:.*STA%((.*)%)%s+(.*)$') \
if s then \
	print(string.format('\
	TIME=\'%s\'; \
	DEVNAME=\'%s\'; \
	STA=\'%s\'; \
	EVENT=\'%s\'', \
	time, dev, sta, event)) \
else \
	print('EVENT=\'\'') \
end ")

    DISCOVERY=""
    STA_AUTHORIZED=""
    PROBE_RESP=""
    if [ "$EVENT" = "had associated successfully" ]; then
        ACTION="ASSOC"
    elif [ "$EVENT" = "had disassociated" -o "$EVENT" = "had deauthenticated" ]; then
        ACTION="DISASSOC"
    elif [ "$EVENT" = "blacklisted in MAC filter list" ]; then
        ACTION="BLACKLISTED"
    elif [ "$EVENT" = "had authorized successfully" ] ||
        [ "$EVENT" = "set key done in WPA/WPAPSK" ] ||
        [ "$EVENT" = "set key done in WPA2/WPA2PSK" ]; then
        ACTION="AUTHORIZE"
    elif [ "$EVENT" = "occurred MIC different in Key Handshaking" ]; then
        ACTION="MIC_DIFF"
    elif [ "$EVENT" = "STA AUTHORIZED" ]; then
        ACTION=""
        STA_AUTHORIZED=$STA
    elif [ "$EVENT" = "occurred CounterMeasures attack" ]; then
        ACTION="COUNTER_MEASURES"
    elif [ "$EVENT" = "Mesh probe requests" ]; then
        ACTION=""
        DISCOVERY=$STA
    elif [ "$EVENT" = "Mesh probe response" ]; then
        ACTION=""
        DISCOVERY=""
        PROBE_RESP=$STA
    else
        ACTION=""
    fi

    [ -n "$ACTION" -a -d /etc/iwevent.d ] && {
        export TIME DEVNAME STA EVENT ACTION
        for script in $(ls /etc/iwevent.d/* 2>&-); do (
            [ -f $script ] && . $script
        ); done
    }

    #[XP-46138]workaround for 5.8G connect issue
    [ "$EVENT" = "CAC_COMPLETED" -o "$EVENT" = "RADAR_DETECT" ] && {
        (sleep 5;
         cfg80211tool wifi2 pdev_reset 2;
         echo ">>>>>>>>>>> cfg80211tool wifi2 pdev_reset 2" >>/dev/console
        ) &
    }

    [ -n "$STA_AUTHORIZED" ] && {
        initted=$(uci -q get xiaoqiang.common.INITTED)
        mesh_mode=$(uci -q get xiaoqiang.common.NETMODE)
        bh_band=$(mesh_cmd backhaul get real_band)
        if [ "$initted" == "YES" ] && [ "$mesh_mode" == "whc_re" ]; then
            backhaul_2g=$(uci -q get misc.backhauls.backhaul_2g_sta_iface)
            backhaul_5g=$(uci -q get misc.backhauls.backhaul_5g_sta_iface)
            backhaul_5gh=$(uci -q get misc.backhauls.backhaul_5gh_sta_iface)
            ifname=`echo $STA_AUTHORIZED | awk '{print $1}'`
            [ "$backhaul_2g" == "$ifname" -o "$backhaul_5g" == "$ifname" -o "$backhaul_5gh" == "$ifname" ] && {
                [ ! -f /usr/sbin/topomon_action.sh ] || /usr/sbin/topomon_action.sh notify_wifi_bh_linked
            }
        fi
    }

    [ -n "$DISCOVERY" ] && {
        initted=$(uci -q get xiaoqiang.common.INITTED)
        if [ "$initted" == "YES" ]; then
            mesh_mode=$(uci -q get xiaoqiang.common.NETMODE)
            if [ "$mesh_mode" != "whc_re" -a "$mesh_mode" != "wifiapmode" ] \
                || [ "$mesh_mode" == "whc_re" -a "$is_mesh_ver4" == "1" ]; then

                cur_device=$(cat /sys/class/net/$DEVNAME/parent)

                # if mesh_support_band is configured
                # only handle probe request recved from mesh supported band
                band_matched=0
                for band in $mesh_support_band; do
                    band_upcase=$(echo "$band" | tr '[a-z]' '[A-Z]')
                    band_device=$(uci -q get misc.wireless.if_${band_upcase})
                    [ "$band_device" == "$cur_device" ] && band_matched=1 && break
                done
                [ "$band_matched" = "0" -a -n "$mesh_support_band" ] && continue

                MAC=`echo $DISCOVERY | awk '{print $1}'`
                RSSI=`echo $DISCOVERY | awk '{print $2}'`
                NODE_TYPE=`echo $DISCOVERY | awk '{print $3}'`
                if [ -n "$NODE_TYPE" -a "$NODE_TYPE" != "0" ]; then
                    SSID=`echo $DISCOVERY | awk '{print $4}'`
                    MODEL=`echo $DISCOVERY | awk '{print $5}'`
                    OBSSID=`echo $DISCOVERY | awk '{print $6}'`
                    MESH_VER=`echo $DISCOVERY | awk '{print $7}'`
                else
                    SSID=""
                    MODEL=""
                    OBSSID=`echo $DISCOVERY | awk '{print $4}'`
                    MESH_VER=`echo $DISCOVERY | awk '{print $5}'`
                fi

                ubus call miwifi-discovery update_agent {\"mac\":\"$MAC\",\"rssi\":$RSSI,\"node_type\":$NODE_TYPE,\
\"ssid\":\"$SSID\",\"model\":\"$MODEL\",\"obssid\":\"$OBSSID\",\"mesh_ver\":$MESH_VER,\"need_sync\":1}
            fi
        fi
    }

    [ -n "$PROBE_RESP" -a "$(uci -q get xiaoqiang.common.INITTED)" != "YES" ] && {

        if [ "$is_mesh_ver4" == "1" ]; then
            MAC=`echo $PROBE_RESP | awk '{print $1}'`
            CUR_BAND=$(mesh_cmd backhaul get band $DEVNAME)
            ubus call miwifi-discovery update_cap {\"mac\":\"$MAC\",\"band\":\"$CUR_BAND\"}
        fi
    }
done
