#!/bin/sh
[ -z "$1" ] && echo "Error: should be run by udhcpc" && exit 1

. /lib/functions.sh
. /lib/netifd/netifd-proto.sh
. /lib/miwifi/miwifi_core_libs.sh

set_classless_routes() {
	local max=128
	while [ -n "$1" -a -n "$2" -a $max -gt 0 ]; do
		proto_add_ipv4_route "${1%%/*}" "${1##*/}" "$2" "$ip"
		max=$(($max - 1))
		shift 2
	done
}

setup_mesh_cab() {
	gateway_ip=$1
	ip=$2
	[ -z "$gateway_ip" -o -z "$ip" ] && return 0

	INITED=$(uci -q get xiaoqiang.common.INITTED)
	[ "$INITED" == "YES" ] && return 0

	#write ip to file for cab_meshd to read
	cab_mesh_file="/tmp/cab_meshd_gw_ip"
	echo "$gateway_ip" >$cab_mesh_file
	echo "$ip" >>$cab_mesh_file

	pid_cab_meshd=$(pidof cab_meshd)
	if [ -z  "$pid_cab_meshd" ]; then
		/etc/init.d/cab_meshd start
	else
		#send sig to cab_meshd
		kill -USR1 $pid_cab_meshd
	fi
}

set_static_routes() {
    local max=128
    local target=
    local oldstr=
    local newstr=
    local mask=

    while [ -n "$1" -a $max -gt 0 ]; do
        target=${1%%/*}
        mask=32
        oldstr=$target
        while [ $mask -ge 0 ]; do
            newstr=${oldstr%%.0}
            if [ "X$newstr" != "X$oldstr" ]; then
                mask=$((mask - 8))
                oldstr=$newstr
            else
                break
            fi
        done

        echo "staticroutes: proto_add_ipv4_route $target $mask ${1##*/}" >/dev/console
        proto_add_ipv4_route "$target" $mask "${1##*/}"
        max=$(($max - 1))
        shift 1
    done
}

setup_interface() {
	proto_init_update "*" 1
	proto_add_ipv4_address "$ip" "${subnet:-255.255.255.0}"
	# TODO: apply $broadcast

	local i
	local gateway_ip
	local ip_net
	eval "$(ipcalc.sh "$ip/$mask")"
	ip_net="$NETWORK"

	for i in $dns; do
		proto_add_dns_server "$i"
	done
	for i in $domain; do
		proto_add_dns_search "$i"
	done

	. /lib/miwifi/miwifi_functions.sh
	local dedicated=$(util_network_dedicated_get $INTERFACE "ipv4")
	if [ "$dedicated" != "1" ]; then
		for i in $router; do
			if [ -f "/bin/ipcalc.sh" ]; then
				eval "$(ipcalc.sh "$i/$mask")"
			else
				echo "ERR: ipcalc.sh is not found." >/dev/console
			fi

			local gw_net="$NETWORK"
			[ "$ip_net" != "$gw_net" ] && proto_add_ipv4_route "$i" 32 "" "$ip"
			proto_add_ipv4_route 0.0.0.0 0 "$i" "$ip"

			local r
			for r in $CUSTOMROUTES; do
				proto_add_ipv4_route "${r%%/*}" "${r##*/}" "$i" "$ip"
			done
			gateway_ip=$i
		done
	else
		local dns_list=${dns// /,}
		util_network_dedicated_set $dns_list
	fi

	# option 33
	[ -n "$routes" ] && set_static_routes $routes

	# CIDR STATIC ROUTES (rfc3442)
	[ -n "$staticroutes" ] && set_classless_routes $staticroutes
	[ -n "$msstaticroutes" ] && set_classless_routes $msstaticroutes

	proto_add_data
	[ -n "$ZONE" ]     && json_add_string zone "$ZONE"
	[ -n "$ntpsrv" ]   && json_add_string ntpserver "$ntpsrv"
	[ -n "$timesvr" ]  && json_add_string timeserver "$timesvr"
	[ -n "$hostname" ] && json_add_string hostname "$hostname"
	[ -n "$message" ]  && json_add_string message "$message"
	[ -n "$timezone" ] && json_add_int timezone "$timezone"
	[ -n "$lease" ]    && json_add_int leasetime "$lease"
	proto_close_data

	proto_send_update "$INTERFACE"

	# setup cable mesh connect
	if [ -n "$gateway_ip" -a -n "$ip" ]; then
		setup_mesh_cab $gateway_ip $ip
	fi

	if [ -n "$IFACE6RD" -a "${IFACE6RD:0:4}" = "wan6" -a -n "$ip6rd" ]; then
		local v4mask="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdprefixlen="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdprefix="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdbr="${ip6rd%% *}"

		[ -n "$ZONE" ] || ZONE=$(fw3 -q network $INTERFACE 2>/dev/null)
		[ -z "$IFACE6RD" -o "$IFACE6RD" = 1 ] && IFACE6RD=${INTERFACE}_6

		json_init
		json_add_string name "$IFACE6RD"
		json_add_string ifname "@$INTERFACE"
		json_add_string proto "6rd"
		json_add_string peeraddr "$ip6rdbr"
		json_add_int ip4prefixlen "$v4mask"
		json_add_string ip6prefix "$ip6rdprefix"
		json_add_int ip6prefixlen "$ip6rdprefixlen"
		json_add_string tunlink "$INTERFACE"
		local peerdns=$(uci -q get network.$IFACE6RD.peerdns)
		[ -z "$peerdns" ] && peerdns=1
		json_add_boolean peerdns "$peerdns"
		if [ "$peerdns" = "0" ]; then
			proto_init_dns_server_ex
			dns_list=$(uci -q get network.$IFACE6RD.dns)
			for dns in "$dns_list"; do
				proto_add_dns_server_ex "$dns"
			done
			proto_update_dns_server_ex
		fi
		[ -n "$IFACE6RD_DELEGATE" ] && json_add_boolean delegate "$IFACE6RD_DELEGATE"
		[ -n "$ZONE6RD" ] || ZONE6RD=$ZONE
		[ -n "$ZONE6RD" ] && json_add_string zone "$ZONE6RD"
		[ -n "$MTU6RD" ] && json_add_string mtu "$MTU6RD"
		json_close_object

		ubus call network add_dynamic "$(json_dump)"
	fi
}

deconfig_interface() {
	proto_init_update "*" 0
	proto_send_update "$INTERFACE"
}

# Mesh RE renew/bound dhcp-IP
setup_for_mesh_re() {
    is_new_ip=$1
    [ -z "$is_new_ip" ] && is_new_ip=1
    # reset lan config
    [ -z "$ip" ] && exit 1
    netmask="${subnet:-255.255.255.0}"
    mtu="${mtu:-1500}"
    dns="${dns:-$router}"
    #model=$(uci -q get misc.hardware.model)
    #[ -z "$model" ] && model=$(cat /proc/xiaoqiang/model)
    #hostname="MiWiFi-$model"

    ap_hostname_tmp=${vendorinfo:7}
    ap_hostname_tmp=${ap_hostname_tmp%%-*}
    ap_hostname=MiWiFi-${ap_hostname_tmp}-srv
    old_ip=$(uci -q get network.lan.ipaddr)
    old_netmask=$(uci -q get network.lan.netmask)
    old_gateway=$(uci -q get network.lan.gateway)

    if [ "$old_ip" == "$ip" -a "$old_gateway" == "$router" ]; then
        logger -p warn -t udhcpc " ============ mesh re ip and gateway not changed, return"
        return
    fi

    logger -p warn -t udhcpc " ============ mesh re set ip=$ip gw=$router."

    uci -q batch <<EOF >/dev/null
        set xiaoqiang.common.ap_hostname=$ap_hostname
        commit xiaoqiang
        set network.lan=interface
        set network.lan.type=bridge
        set network.lan.proto=dhcp
        set network.lan.ipaddr=$ip
        set network.lan.netmask=$netmask
        set network.lan.gateway=$router
        set network.lan.mtu=$mtu
        del network.lan.dns
        del network.vpn
EOF
    for d in $dns
    do
        uci -q add_list network.lan.dns=$d
    done
    uci commit network
    # restart service
    ifdown vpn
    [ -f /usr/sbin/vasinfo_fw.sh ] && /usr/sbin/vasinfo_fw.sh off
    [ "$is_new_ip" == "1" ] && /usr/sbin/ip_changed.sh lan "$old_ip" "$old_netmask" "$ip" "$netmask"

    # accelleration hook event
    network_accel_hook "whc_re" "setup"

    if [ "$(uci -q get xiaoqiang.common.INITTED)" == "YES" ]; then
        #logger -p warn -t udhcpc "====== is_new_ip = 0, ubus call network reload ======"
        ubus call network reload
    fi

    bh_type=$(cat /var/run/topomon/bh_type)
    if [ $bh_type == "wireless" -a "$is_new_ip" == "1" ]; then
        logger -p warn -t udhcpc "bh is wireless and newip, phyhelper restart lan"
        /sbin/phyhelper restart lan
    fi
    #
    # No Need to reload network, as network config not changed.
    #
    # call netifd reload, and it will stop udhcpc. And must avoid conflict with wifi OPS.
	#if [ "$(uci -q get xiaoqiang.common.INITTED)" != "YES" ]; then
    #	ubus call network reload
    #	logger -p warn -t udhcpc "====== ubus call network reload, make netifd kill udhcpc immediately !"
    #else
    #	[ -f /etc/init.d/hyd ] && /etc/init.d/hyd stop
    #   ubus call network reload
    #   logger -p warn -t udhcpc "====== call /etc/init.d/network reload after dhcp, make lan to static."
    #fi
}

case "$1" in
	deconfig)
		deconfig_interface
	;;
	renew|bound)
		setup_interface
		# do other config for mesh RE device [master:whc_cap  child:whc_re]
		mesh_mode=$(uci -q get xiaoqiang.common.NETMODE)
		if [ "$mesh_mode" == "whc_re" ]; then
			if [ "$1" == "bound" ]; then
				setup_for_mesh_re 1
			else
				setup_for_mesh_re 0
			fi
		fi
	;;
        offer_exit)
                echo vendorinfo=$vendorinfo
                vendorinfo_tmp=${vendorinfo:0:8}
                echo vendorinfo_tmp=$vendorinfo_tmp
                if [ "$vendorinfo_tmp" != "opt_ret=" ];then
                        echo "100" > /tmp/dhcp_opt43_act_tmp
                else
                        echo ${vendorinfo##*=} > /tmp/dhcp_opt43_act_tmp
                fi
	;;

esac

# user rules
[ -f /etc/udhcpc.user ] && . /etc/udhcpc.user "$@"

exit 0
