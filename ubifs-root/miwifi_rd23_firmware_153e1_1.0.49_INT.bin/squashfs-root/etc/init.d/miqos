#!/bin/sh /etc/rc.common

START=98

USE_PROCD=1
EXTRA_COMMANDS=" on off shutdown die restart app_on app_off"
EXTRA_COMMANDS=" $EXTRA_COMMANDS qos_flag status "
EXTRA_COMMANDS=" $EXTRA_COMMANDS on_limit off_limit set_limit reset_limit apply show_limit limit_flag "
EXTRA_COMMANDS=" $EXTRA_COMMANDS change_band show_band "
EXTRA_COMMANDS=" $EXTRA_COMMANDS set_type show_cfg "
EXTRA_COMMANDS=" $EXTRA_COMMANDS on_guest show_guest on_xq show_xq on_leteng show_leteng set_leteng_task clean_leteng_task"
EXTRA_COMMANDS=" $EXTRA_COMMANDS set_seq get_seq game_mode_on game_mode_off game_dev_add game_dev_del show_game_state game_dev_band game_mode_band"
EXTRA_COMMANDS=" $EXTRA_COMMANDS nprio reserve qos_mode_on fast_path_off qos_mode_off fast_path_on wangzhe_plug_on wangzhe_plug_off"
EXTRA_COMMANDS=" $EXTRA_COMMANDS supress_on supress_off supress_update "

#FIX-QOS only
EXTRA_COMMANDS=" $EXTRA_COMMANDS device_in device_out "


EXTRA_HELP="
--stat:
    on/off/shutdown/die/restart
    qos_flag/status
--limit:
    on_limit/set_limit min/max/all [MAC] MAX-UP MAX-DOWN MIN-UP MIN-DOWN
    off_limit/reset_limit [MAC]
    show_limit
    apply
    limit_flag [MAC] on/off
    show_limit_flag [MAC]
--band:
    change_band UP-RATE DOWN-RATE
    show_band
--type:
    set_type [auto/min/max/service]
    show_cfg
--guest & xq:
    on_guest UP DOWN
    show_guest
    on_xq UP DOWN
    show_xq
--seq:
    get_seq
    set_seq [auto/game/web/video]
--supress:
    supress_update/supress_on/supress_off
--others:
    nprio add/del IP HIGH_PRIO_WITHOUT_LIMIT/HIGH_PRIO_WITH_BANDLIMIT
    reserve add/del IP video
"

#only support 3 types, CTF/STD/FIX
QOS_VER="NOIFB"   #here, value would be replace by sed
WAN_SPEED="__WAN_SPEED__"

HARDWARE=`/sbin/uci get /usr/share/xiaoqiang/xiaoqiang_version.version.HARDWARE`
if [ "$HARDWARE" == "R3" ]; then
    WAN_SPEED="102408"
fi

if [ "$QOS_VER" == "CTF" ]; then
    EXECMD="/usr/bin/lua /usr/sbin/miqosd ctf"
    EXECMD_C="/usr/sbin/miqosc"
    export PROCLINE=$EXECMD
    export PROCFLAG=$PROCLINE
elif [ "$QOS_VER" == "STD" ]; then
    EXECMD="/usr/bin/lua /usr/sbin/miqosd std"
    EXECMD_C="/usr/sbin/miqosc"
    export PROCLINE=$EXECMD
    export PROCFLAG=$PROCLINE
elif [ "$QOS_VER" == "HWQOS" ]; then
    EXECMD="/usr/bin/lua /usr/sbin/miqosd hwqos"
    EXECMD_C="/usr/sbin/miqosc"
    export PROCLINE=$EXECMD
    export PROCFLAG=$PROCLINE
else
    EXECMD_C="/usr/sbin/miqosc"
fi

#not supported command check
ignore(){
    null_types=$1
    [ -z "$null_types" ] && return 0

    for t in $null_types;
    do
        [ "$t" = "$QOS_VER" ] && echo "not supported for $QOS_VER." && exit 0
    done
}

#-------------------------------
init_ipt(){
    /usr/sbin/sysapi miqos on
    return $?
}

del_ipt(){
    /usr/sbin/sysapi miqos off
    return $?
}

dev_redirect_on(){
    if [ -f "/proc/sys/net/dev_redirect_enable" ]; then
        echo 1 > /proc/sys/net/dev_redirect_enable
    fi
}

dev_redirect_off(){
    if [ -f "/proc/sys/net/dev_redirect_enable" ]; then
        echo 0 > /proc/sys/net/dev_redirect_enable
    fi
}

boot(){
    local enabled=$(uci -q get miqos.settings.enabled)
    [ "$enabled" != "1" ] && return 0
    local force_disabled=$(uci -q get miqos.settings.force_disabled)
    [ "$force_disabled" = "1" ] && return 0

    if [ "$QOS_VER" == "NOIFB" ]; then
        echo "miqos: delay 5s to wait for network ready."
        (sleep 5; start) &
    else
        start
    fi
}

#-------------------------------
#0,ok; non-0, Nok
start_service() {
    local mode=$(uci -q get xiaoqiang.common.NETMODE)
    [ "$mode" = "wifiapmode" -o "$mode" = "lanapmode" -o "$mode" = "whc_re" -o "$mode" = "cpe_bridgemode" ] && {
        echo "In AP mode, disable QoS. exit!"
        return 0
    }
    local enabled=$(uci -q get miqos.settings.enabled)
    [ "$enabled" != "1" ] && {
        echo "QoS is disabled!"
        return 0
    }
    local force_disabled=$(uci -q get miqos.settings.force_disabled)
    [ "$force_disabled" = "1" ] && {
        echo "QoS is force-disabled!"
        return 0
    }

    if [ "$QOS_VER" = "FIX" -o "$QOS_VER" = "NOIFB" ]; then
        init_ipt
        dev_redirect_on
        $EXECMD_C on
    else
        procd_open_instance
        procd_set_param command ${EXECMD}
        procd_set_param respawn
        procd_close_instance
        echo "miqosd start ok"

        qos_flag
        [ "$?" != "0" ] && {
            echo "miqos is not enabled, only keep top layer1 queue."
            running
            [ "$?" = "0" ] && $EXECMD_C off
            return 0
        }

        $EXECMD_C on   # enable QoS Service
    fi

    return 0
}

stop_service() {
    dev_redirect_off
    del_ipt
    shutdown

    [ -n "$CMD" ] && service_stop ${CMD}
}

shutdown(){
    $EXECMD_C shutdown
}

restart(){
    stop
    start &>/dev/null
    return 0
}

on(){
    uci -q batch <<EOF
        set miqos.settings.enabled=1
        commit miqos
        set firewall.miqos='include'
        set firewall.miqos.path='/lib/firewall.sysapi.loader miqos'
        set firewall.miqos.reload='1'
        commit firewall
EOF

    [ "$QOS_VER" = "STD" ] && {
        uci set hwnat.switch.miqos=1
        uci commit hwnat

        /etc/init.d/hwnat stop &>/dev/null
    }

    start

    . /lib/miwifi/miwifi_core_libs.sh
    network_accel_hook qos start
}

off(){
    uci -q batch <<EOF
        set miqos.settings.enabled=0
        commit miqos
        delete firewall.miqos
        commit firewall
EOF

    if [ "$QOS_VER" = "FIX" -o "$QOS_VER" = "NOIFB" ]; then
        del_ipt
        stop #clean directly

    elif [ "$QOS_VER" = "STD" ]; then
        uci set hwnat.switch.miqos=0
        uci commit hwnat

        running
        [ "$?" = "1" ] && start        # if not running, invoke start, and then off it

        $EXECMD_C off     #close htb rules

        #try to start hwnat whatever enough memory or not
        /etc/init.d/hwnat start &>/dev/null

    else
        running
        [ "$?" = "1" ] && start        # if not running, invoke start, and then off it
        $EXECMD_C off     #close htb rules
    fi

    . /lib/miwifi/miwifi_core_libs.sh
    network_accel_hook qos stop

    return 0
}

app_on(){
    [ "$WAN_SPEED" = "__WAN_SPEED__" ] && {
        echo "No wan speed!"
        return 0
    }

    local download=$(uci -q get miqos.settings.download)
    local upload=$(uci -q get miqos.settings.upload)
    local enable=$(uci -q get miqos.settings.enabled)

    [ "$download" != "0" ] && {
        echo "download not 0!"
        return 0
    }
    [ "$upload" != "0" ] && {
        echo "upload not 0!"
        return 0
    }
    [ "$enable" != "0" ] && {
        echo "enable not 0!"
        return 0
    }

    change_band $WAN_SPEED $WAN_SPEED
    set_seq game
    on
}

app_off(){
    [ "$WAN_SPEED" = "__WAN_SPEED__" ] && {
        echo "No wan speed!"
        return 0
    }

    local download=$(uci -q get miqos.settings.download)
    local upload=$(uci -q get miqos.settings.upload)
    local seq_prio=$(uci -q get miqos.param.seq_prio)

    #if user changed qos config during app on ,just return
    [ "$download" != "$WAN_SPEED" ] && {
        echo "download config changed!"
        return 0
    }
    [ "$upload" != "$WAN_SPEED" ] && {
        echo "upload config changed!"
        return 0
    }
    [ "$seq_prio" != "game" ] && {
        echo "prio config changed!"
        return 0
    }

    change_band 0 0
    set_seq auto
    off
}

die(){
    $EXECMD_C die &
    stop_service
    return 0
}

#-------------------------------
#return: 0,enabled; 1 disabled
qos_flag(){
    local st=$(uci -q get miqos.settings.enabled)
    if [ "$st" = "0" ]; then
        return 1
    else
        return 0
    fi
}

# status: 0, actived, 1, inactived
status(){
    qos_flag
    [ "$?" = "1" ] && return 1

    [ "$QOS_VER" = "FIX" -o "$QOS_VER" = "NOIFB" ] && return 0

    local dd=$(ps | grep miqosd | grep -v grep)
    if [ ! -n "$dd" ]; then
        return 1
    else
        return 0
    fi
}

# 1:miqosd is not running; 0:miqosd is running
running(){
    ignore "FIX"

    local dd=$(ps | grep miqosd | grep -v grep)
    if [ ! -n "$dd" ]; then
        return 1
    else
        return 0
    fi
}

#-------------------------------
on_limit(){
    $EXECMD_C on_limit $@
}

off_limit(){
    $EXECMD_C off_limit $@
}

set_limit(){
    $EXECMD_C set_limit $@
}

reset_limit(){
    $EXECMD_C reset_limit $@
}

apply(){
    $EXECMD_C apply $@
}

show_limit(){
    $EXECMD_C show_limit $@
}

limit_flag(){
    $EXECMD_C limit_flag $@
}


#-------------------------------
change_band(){
    $EXECMD_C change_band $@
}

show_band(){
    $EXECMD_C show_band $@
}

#-------------------------------
set_type(){
    ignore "FIX"
    $EXECMD_C set_type $@
}

show_cfg(){
    $EXECMD_C show_cfg $@
}

#-------------------------------
on_guest(){
    $EXECMD_C on_guest $@
}


show_guest(){
    $EXECMD_C show_guest $@
}

on_xq(){
    $EXECMD_C on_xq $@
}


show_xq(){
    $EXECMD_C show_xq $@
}

on_leteng(){
    $EXECMD_C on_leteng $@
}


show_leteng(){
    $EXECMD_C show_leteng $@
}

#-------------------------------
nprio(){
    ignore "FIX"
    $EXECMD_C nprio $@
}

reserve(){
    ignore "FIX"
    $EXECMD_C reserve $@
}

#-------------------------------
get_seq(){
    $EXECMD_C get_seq $@
}

set_seq(){
    $EXECMD_C set_seq $@
}

#-------------------------------
supress_on(){
    ignore "FIX"
    $EXECMD_C supress_host on
}

supress_off(){
    ignore "FIX"
    $EXECMD_C supress_host off
}

supress_update(){
    ignore "FIX"
    local app_name="2"  # xunyou
    [ -f /proc/flowmark_app ] && {
        local ret=$(cat /proc/flowmark_app | awk -v app_name=$app_name -F, '{ if($5!="" && $2==app_name){print($5) } }')
        if [ "$ret" != "" ]; then
            $EXECMD_C supress_host on
        else
            $EXECMD_C supress_host off
        fi
    }
}

set_leteng_task(){
    [ -f "/dev/cgroup/net_cls/leteng/tasks" ] && echo $1 > /dev/cgroup/net_cls/leteng/tasks
    return 0
}


clean_leteng_task(){
    return 0
}
#-------------------------------

device_in(){
    ignore "CTF STD"
    $EXECMD_C device_in $@
}

device_out(){
    ignore "CTF STD"
    $EXECMD_C device_out $@
}

game_dev_add(){
    $EXECMD_C game_dev_add $@
}

game_dev_del(){
    $EXECMD_C game_dev_del $@
}

show_game_state(){
    $EXECMD_C show_game_state $@
}

game_dev_band(){
    $EXECMD_C game_dev_band $@
}

game_mode_band(){
    $EXECMD_C game_mode_band $@
}

wangzhe_plug_on(){
    $EXECMD_C wangzhe_plug_on $@
}

wangzhe_plug_off(){
    $EXECMD_C wangzhe_plug_off $@
}
