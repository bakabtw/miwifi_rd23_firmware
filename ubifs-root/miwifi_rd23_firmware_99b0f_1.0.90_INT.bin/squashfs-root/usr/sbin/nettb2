#! /bin/sh
# troubleshoot script for network.

# skip wan monitor in FT mode
check_factory_mode() {
	local ft_mode=$(cat /proc/xiaoqiang/ft_mode)
	[ "$ft_mode" = "1" ] && exit 0
}
check_factory_mode

. /lib/functions.sh
. /usr/share/libubox/jshn.sh
. /lib/functions/network.sh

network_flush_cache

json_out() {
	json_init
	json_add_string code "$1"
	json_add_string reason "$2"
	echo "$(json_dump)"
}

# find out why wan is down?
diagnose_wan_down() {
	local proto=$1
	local wan_sec=$2
	case "$proto" in
	pppoe)
		local pppoe_ret=$(lua /usr/sbin/pppoe.lua status $wan_sec)
		local ret
		local code
		json_load "${pppoe_ret}"
		json_get_var ret "msg"
		json_get_var code "code"
		json_get_var proc "process"
		case "$ret" in
		678)
			[ $code = "531" ] && return 3
			[ $code = "532" ] && return 34
			;;
		633)
			return 31
			;;
		691)
			[ $code = "507" ] && return 32
			[ $code = "508" ] && return 33
			;;
		esac
		[ $proc = "down" ] && return 35
		if [ ! -n "$ret" ]; then
			[ $proc = "connecting" ] && return 35
		fi
		#TODO check if the result is not there
		;;
	dhcp)
		return 2
		;;
	dhcp6)
		return 2
		;;
	esac
	# TODO for vnp ?
	return 10
}

is_subnet_conflict() {
	local net1=$(/bin/ipcalc.sh "$1" | grep NETWORK)
	local net2=$(/bin/ipcalc.sh "$2" | grep NETWORK)
	[ "$net1" = "$net2" ]
}

is_gateway_reachable() {
	local dev="$1"
	local gw="$2"
	ping -c 2 -W 2 -q "$gw" >/dev/null ||
		arping -f -q -c 3 -w 2 -I "$dev" "$gw" ||
		return 1
	return 0
}

is_v6gateway_reachable() {
	local dev="$1"
	local gw="$2"

	if [ -z "$dev" ]; then
		ping6 -c 2 -W 2 -q "$gw" >/dev/null || return 1
	else
		ping6 -I $dev -c 2 -W 2 -q "$gw" >/dev/null || return 1
	fi

	return 0
}

dns_check() {
	local dns_list="$1"
	local host_list="$2"
	if [ -z "$host_list" ]; then
		cc=$(/usr/sbin/getCountryCode)
		cc=${cc:-CN}
		if [ "$cc" = "CN" ]; then
			host_list=$(uci -q get system.netdt.cn_domain)
		else
			host_list=$(uci -q get system.netdt.world_domain)
		fi
	fi
	for ns in $dns_list; do
		for th in $host_list; do
			# fix nslookup reverse resolving
			/usr/sbin/nslookupc "$th" "$ns" 5 && return 0
		done
	done
}

ping_check() {
	local interface="$1"
	local country_code="$2"
	local device
	[ -z "$interface" ] && return 1

	network_get_device device "$interface"
	[ -z "$device" ] && return 1

	_ping_check "$device" "$country_code"
}

_ping_check() {
	local device="$1"
	local cc="$2"

	[ -z "$device" ] && return 1

	if [ -z "$cc" ] ; then
		cc=$(/usr/sbin/getCountryCode)
		cc=${cc:-CN}
	fi

	if [ "$cc" = '"CN"' -o "$cc" = 'CN' ]; then
		host_list=$(uci -q get system.netdt.cn_domain)
	else
		host_list=$(uci -q get system.netdt.world_domain)
	fi

	for th in $host_list; do
		ping -w 1 -c 1 -I "$device" "$th" >/dev/null 2>/dev/null && return 0
	done
}
ping6_check() {
	local device="$1"
	local cc="$2"

	[ -z "$device" ] && return 1

	if [ -z "$cc" ] ; then
		cc=$(/usr/sbin/getCountryCode)
		cc=${cc:-CN}
	fi

	if [ "$cc" = '"CN"' -o "$cc" = 'CN' ]; then
		host_list=$(uci -q get system.netdt.cn_domain)
	else
		host_list=$(uci -q get system.netdt.world_domain)
	fi

	for th in $host_list; do
		ping6 -w 1 -c 1 -I "$device" "$th" >/dev/null 2>/dev/null && return 0
	done
}

parse_json(){
    echo "$1" |awk -F "$2" '{print $2}'|awk -F ": " '{print $2}' |awk -F "," '{print $1}' |sed '/^$/d'
}

printReason() {
	local errorcode=$1
	local res=1
	case $errorcode in
	0)	res=0;;
	1)	json_out 1 'wan port unplug';;
	2)	json_out 2 "dhcp no server";;
	3)	json_out 3 "pppoe no response";;
	4)	json_out 4 'dhcp upstream conflict';;
	5)	json_out 5 'gateway unreachable';;
	6)	json_out 6 'dns resolve failed';;
	7)	json_out 7 'dns custom set';;
	10)	json_out 10 "link broken";;
	12)	json_out 12 'cpe wan port unplug';;
	13)	json_out 13 'network data is disable';;
	14)	json_out 14 'failed to register network';;
	15)	json_out 15 'cpe no signal';;
	16)	json_out 16 'error ip address';;
	17)	json_out 17 'dhcp upstream conflict';;
	18)	json_out 18 'dns resolve failed';;
	19)	json_out 19 'failed to ping';;
	31)	json_out 31 "pppoe no more sesson";;
	32)	json_out 32 "pppoe password error";;
	33)	json_out 33 "pppoe account not valid";;
	34)	json_out 34 "pppoe need reset mac";;
	35)	json_out 35 "pppoe stop by user";;
	esac

	return $res
}

diagnose_v4wan() {
	local wan_sec="$1"
	local sim_cc="$2"
	local wan_type proto
	
	proto=$(uci -q get network.$wan_sec.proto)
	wan_type=$(uci -q get network.$wan_sec.wantype)
	[ -n "$wan_type" ] || wan_type="eth"

	if [ "$wan_type" = "eth" ] ; then
		# check wan link status
		check_eth_wan_link $wan_sec
		if [ 0 != $? ]; then
			return 1
		fi

		# is wan up?
		network_is_up $wan_sec || {
			diagnose_wan_down "$proto" $wan_sec
			return $?
		}
	fi

	local ipv4_addr
	network_get_ipaddr ipv4_addr $wan_sec
	[ -z "$ipv4_addr" ] || [ "$ipv4_addr" = "0.0.0.0" ] && {
		return 16
	}

	# check subnet conflict - dhcp
	local wan_sub
	local lan_sub
	network_get_subnet wan_sub $wan_sec
	network_get_subnet lan_sub lan
	[ "$proto" = "dhcp" -o "$proto" = "static" ] && is_subnet_conflict "$wan_sub" "$lan_sub" && {
		return 4
	}

	if [ "$wan_type" = "eth" ] ; then
		# do not check gateway for pppoe since it may not work
		local gw
		local dev
		network_get_gateway gw $wan_sec
		network_get_physdev dev $wan_sec
		[ "$proto" = "pppoe" ] || is_gateway_reachable "$dev" "$gw" || {
			return 5
		}
	fi

	local upstream='/tmp/resolv.conf.upstream'
	local hostname=""
	local ns
	network_get_dnsserver ns $wan_sec
	dns_check "$ns" "$hostname" || {
		if [ "$proto" = "static" ] || [ -f "$upstream" ]; then
			return 7
		else
			return 6
		fi
	}

	ping_check "$wan_sec" "$sim_cc" || ping_check vpn "$sim_cc" || {
		return 19
	}
	return 0
}

diagnose_v6wan() {
	local wan_sec="$1"
	local sim_cc="$2"
	local wan_type proto

	proto=$(uci -q get network.$wan_sec.proto)
	wan_type=$(uci -q get network.$wan_sec.wantype)
	[ -n "$wan_type" ] || wan_type="eth"

	if [ "$wan_type" = "eth" ] ; then
		# check wan link status
		check_eth_wan_link $wan_sec
		if [ 0 != $? ]; then
			return 1
		fi

		# is wan up?
		network_is_up $wan_sec || {
			diagnose_wan_down "$proto" $wan_sec
			return $?
		}
	fi

	local ipv6_addr
	network_get_ipaddr6 ipv6_addr $wan_sec
	[ -z "$ipv6_addr" ] || [ "$ipv6_addr" = "::" ] && {
		return 16
	}

	if [ "$wan_type" = "eth" ] ; then
		# do not check gateway for pppoe since it may not work
		local gw
		local dev
		network_get_gateway6 gw $wan_sec
		network_get_physdev dev $wan_sec
		[ "$proto" = "pppoe" ] || is_v6gateway_reachable "$dev" "$gw" || {
			return 5
		}
	fi

	local upstream='/tmp/resolv.conf.upstream'
	local hostname=""
	local ns
	network_get_dnsserver ns $wan_sec
	dns_check "$ns" "$hostname" || {
		if [ "$proto" = "static" ] || [ -f "$upstream" ]; then
			return 7
		else
			return 6
		fi
	}
	local device
	network_get_device device $wan_sec
	ping6_check "$device" "$sim_cc" || {
		return 19
	}

	return 0
}

check_eth_wan_link() {
	local wan_sec="$1"
	local ifname=$(uci -q get network.$wan_sec.ifname)
	local result=0

	[ -n "$ifname" ] || return 1

	[ -f "/sys/class/net/$ifname/carrier" ] && {
		cat "/sys/class/net/$ifname/carrier" | grep -q 1 || result=1
	}

	return $result
}
diagnose_cpe_wan() {
	local wan_sec="$1"

	local sim=$(ubus call mobile sim)
	local status=$(parse_json "$sim" "status")
	local sim_cc=$(parse_json "$sim" "country")
	if [ "$status" != "1" ]; then
		return 12
	fi

	local dataon=$(uci -q get mobile.common.networkdata)
	[ -n "$dataon" ] && [ "$dataon" = "0" ] && {
		return 13
	}

	local netstat=$(ubus call mobile status)
	local registration=$(parse_json "$netstat" "registration")
	local signal=$(parse_json "$netstat" "level")
	if [ "$registration" = "0" ] ; then
		return 14
	elif [ "$signal" = "0" ] ; then
		return 15
	fi

	local family=$(echo "$wan_sec"|grep "wan6")

	if [ "$family" != "" ] ; then
		diagnose_v6wan "$wan_sec" "$sim_cc"
	else
		diagnose_v4wan "$wan_sec" "$sim_cc"
	fi

	# Convert to cellular error code
	local res=$?
	case $res in
	4)
		res=17
		;;
	6)
		res=18
		;;
	7)
		res=18
		;;
	esac

	return $res
}

diagnose_eth_wan() {
	local wan_sec="$1"
	local family=$(echo "$wan_sec"|grep "wan6")

	if [ "$family" != "" ] ; then
		diagnose_v6wan "$wan_sec"
	else
		diagnose_v4wan "$wan_sec"
	fi
	local res=$?
	case $res in
	16)
		res=4
		;;
	19)
		res=5
		;;
	esac

	return $res
}
# $1 : wan_sec
check_wan_internet() {
	local wan_sec="$1"
	local proto type

	type=$(uci -q get network.$wan_sec.wantype)
	[ -n "$type" ] || type="eth"

	if [ "$type" = "cpe" ] ; then
		diagnose_cpe_wan $wan_sec
	else
		diagnose_eth_wan $wan_sec
	fi
	printReason $?
	return $?
}

check_interface()
{
	local wan_sec=$1

	[ "${wan_sec}" = "wan" -o "${wan_sec:0:4}" = "wan_" ] || return
	[ "1" = "$(uci -q get network.$wan_sec.disabled)" ] && return
	#[ "${wan_sec:0:4}" = "wan6" ] || return

	check_wan_internet $wan_sec
	[ $? -eq 0 ] && exit 0
}

normal_diagnose1() {
	return
}

normal_diagnose() {
	local wan_sec="$1"
	local result=1

	if [ -n "$wan_sec" ]; then
		check_wan_internet $wan_sec
		result=$?
	else
		config_load network
		config_foreach check_interface interface
	fi

	return $result
}

wifi_ap_diagnose() {
	local hostname="$1"
	local gw
	local dev
	network_get_gateway gw lan
	network_get_physdev dev lan
	is_gateway_reachable "$dev" "$gw" || {
		json_out 8 'wifi_ap: gateway unreachable'
		return 1
	}
	network_get_dnsserver ns lan
	dns_check "$ns" "$hostname" || {
		json_out 6 'dns resolve failed'
		return 1
	}
}

wire_ap_diagnose() {
	local hostname="$1"
	local gw
	local dev
	network_get_gateway gw lan
	network_get_physdev dev lan
	is_gateway_reachable "$dev" "$gw" || {
		json_out 9 'wire_ap: gateway unreachable'
		return 1
	}
	local ns
	network_get_dnsserver ns lan
	dns_check "$ns" "$hostname" || {
		json_out 6 'dns resolve failed'
		return 1
	}
}

whc_re_diagnose() {
	local hostname="$1"
	local gw
	local dev
	network_get_gateway gw lan
	network_get_physdev dev lan
	is_gateway_reachable "$dev" "$gw" || {
		json_out 11 'whc_re: gateway unreachable'
		return 1
	}
	local ns
	network_get_dnsserver ns lan
	dns_check "$ns" "$hostname" || {
		json_out 6 'dns resolve failed'
		return 1
	}
}

net_mode=$(uci -q get xiaoqiang.common.NETMODE)
case "$net_mode" in
lanapmode)
	wire_ap_diagnose "$1"
	;;
wifiapmode)
	wifi_ap_diagnose "$1"
	;;
whc_re | agent)
	whc_re_diagnose "$1"
	;;
*)
	normal_diagnose "$1"
	;;
esac
